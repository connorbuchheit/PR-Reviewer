import type { EnhancedChainOfThoughtStep } from "@/types/knowledge-retrieval"

// Chain of thought for PR 142 (Database Optimization) - Has security issues
export const pr142ChainOfThought: EnhancedChainOfThoughtStep[] = [
  {
    id: "cot_1",
    timestamp: 0,
    type: "thought",
    content:
      "I need to start by understanding what this PR is trying to accomplish. Let me examine the title and description first.",
    context: "Initial Context Gathering",
    confidence: 0.95,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_2",
    timestamp: 800,
    type: "observation",
    content:
      "The PR title mentions 'Optimize database queries and add caching layer' - this suggests performance improvements are the main focus.",
    context: "PR Analysis",
    confidence: 0.92,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_3",
    timestamp: 1500,
    type: "action",
    content: "Scanning repository structure to understand current architecture patterns...",
    context: "Repository Analysis",
    actionType: "analyze_code",
    relatedNode: "context_gathering",
  },
  {
    id: "cot_4",
    timestamp: 2300,
    type: "observation",
    content:
      "I can see this codebase follows a repository pattern with service layers. The current approach uses direct SQL queries without caching.",
    context: "Architecture Understanding",
    confidence: 0.88,
    relatedNode: "context_gathering",
    appliedPolicies: ["pattern_repository"],
    knowledgeConfidence: 0.91,
  },
  {
    id: "cot_5",
    timestamp: 3100,
    type: "thought",
    content:
      "Since the user specified 'Performance Focus' as the review criteria, I should weight query optimization and caching strategies heavily in my analysis.",
    context: "Criteria Application",
    confidence: 0.94,
    relatedNode: "style_analysis",
  },
  {
    id: "cot_6",
    timestamp: 3900,
    type: "decision",
    content:
      "I'll focus 40% on performance, 30% on reliability (error handling), and 30% on maintainability. This aligns with the performance-focused criteria.",
    context: "Review Strategy",
    confidence: 0.91,
    relatedNode: "style_analysis",
  },
  {
    id: "cot_7",
    timestamp: 4700,
    type: "action",
    content: "Analyzing database queries in src/database/queries.ts...",
    context: "Code Analysis",
    actionType: "analyze_code",
    metadata: { file: "src/database/queries.ts" },
    relatedNode: "db_analysis",
  },
  {
    id: "cot_8",
    timestamp: 5500,
    type: "observation",
    content: "Found several optimized queries that should reduce N+1 problems. Good use of indexing strategies.",
    context: "Performance Assessment",
    confidence: 0.87,
    metadata: { score: 92 },
    relatedNode: "db_analysis",
  },
  {
    id: "cot_9",
    timestamp: 6200,
    type: "thought",
    content:
      "Wait, I'm seeing a potential SQL injection vulnerability on line 23. This is concerning from a security perspective. Let me check our security policies.",
    context: "Security Analysis",
    confidence: 0.95,
    metadata: { file: "src/database/queries.ts", line: 23 },
    relatedNode: "db_analysis",
  },
  {
    id: "cot_10",
    timestamp: 6800,
    type: "action",
    content:
      "Flagging security issue and preparing recommendation for prepared statements based on company security policy...",
    context: "Security Remediation",
    actionType: "generate_comment",
    metadata: { file: "src/database/queries.ts", line: 23 },
    relatedNode: "db_analysis",
    appliedPolicies: ["policy_sql_injection"],
    knowledgeConfidence: 0.95,
  },
  {
    id: "cot_11",
    timestamp: 7600,
    type: "action",
    content: "Moving to analyze Redis caching implementation in src/cache/redis.ts...",
    context: "Cache Analysis",
    actionType: "analyze_code",
    metadata: { file: "src/cache/redis.ts" },
    relatedNode: "cache_analysis",
  },
  {
    id: "cot_12",
    timestamp: 8400,
    type: "observation",
    content:
      "The Redis setup is basic but functional. I see appropriate TTL settings, but no connection pooling. Let me check our policies on this...",
    context: "Caching Strategy Review",
    confidence: 0.78,
    relatedNode: "cache_analysis",
  },
  {
    id: "cot_13",
    timestamp: 9100,
    type: "reflection",
    content:
      "⚠️ KNOWLEDGE CONFLICT: I found conflicting guidance about connection pooling requirements. Security policy mandates it, but team practices suggest it's optional for small services. I need to flag this for human review rather than make a potentially incorrect recommendation.",
    context: "Conflict Detection",
    confidence: 0.45,
    relatedNode: "cache_analysis",
    conflictingKnowledge: ["security_pooling_policy", "team_pooling_guideline"],
    knowledgeConfidence: 0.45,
  },
  {
    id: "cot_14",
    timestamp: 10200,
    type: "decision",
    content:
      "Due to the SQL injection vulnerability and knowledge conflicts, this PR requires human review before approval. I'll generate a comprehensive report with security concerns highlighted.",
    context: "Final Assessment",
    confidence: 0.88,
    relatedNode: "summary_generation",
  },
]

// Chain of thought for PR 140 (TypeScript Migration) - Clean, no security issues
export const pr140ChainOfThought: EnhancedChainOfThoughtStep[] = [
  {
    id: "cot_1",
    timestamp: 0,
    type: "thought",
    content:
      "This PR is about migrating React components to TypeScript. This should be a straightforward code quality improvement with minimal security concerns.",
    context: "Initial Assessment",
    confidence: 0.92,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_2",
    timestamp: 700,
    type: "observation",
    content:
      "Looking at the file changes: 24 files modified, 445 additions, 312 deletions. This suggests a comprehensive migration rather than partial changes.",
    context: "Scope Analysis",
    confidence: 0.94,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_3",
    timestamp: 1400,
    type: "action",
    content: "Analyzing TypeScript configuration and type definitions...",
    context: "Configuration Review",
    actionType: "analyze_code",
    metadata: { file: "tsconfig.json" },
    relatedNode: "config_analysis",
  },
  {
    id: "cot_4",
    timestamp: 2100,
    type: "observation",
    content:
      "Excellent TypeScript configuration! Strict mode is enabled, proper compiler options are set, and path mapping is configured correctly.",
    context: "Configuration Assessment",
    confidence: 0.96,
    metadata: { score: 96 },
    relatedNode: "config_analysis",
    appliedPolicies: ["typescript_strict_mode"],
    knowledgeConfidence: 0.94,
  },
  {
    id: "cot_5",
    timestamp: 2800,
    type: "action",
    content: "Reviewing component type definitions and prop interfaces...",
    context: "Type Safety Analysis",
    actionType: "analyze_code",
    metadata: { file: "src/components/UserProfile.tsx" },
    relatedNode: "type_analysis",
  },
  {
    id: "cot_6",
    timestamp: 3500,
    type: "observation",
    content:
      "The type definitions are comprehensive and well-structured. Props are properly typed, and I can see good use of generic types where appropriate.",
    context: "Type Quality Review",
    confidence: 0.93,
    relatedNode: "type_analysis",
  },
  {
    id: "cot_7",
    timestamp: 4200,
    type: "thought",
    content:
      "I should check for any remaining 'any' types or potential type safety issues that might have been missed during migration.",
    context: "Type Safety Validation",
    confidence: 0.89,
    relatedNode: "type_analysis",
  },
  {
    id: "cot_8",
    timestamp: 4900,
    type: "action",
    content: "Scanning for unsafe type patterns and 'any' usage...",
    context: "Safety Pattern Analysis",
    actionType: "check_patterns",
    relatedNode: "type_analysis",
  },
  {
    id: "cot_9",
    timestamp: 5600,
    type: "observation",
    content:
      "Found only 2 instances of 'any' type usage, both appear to be legitimate cases for external library integration. No unsafe type assertions detected.",
    context: "Type Safety Results",
    confidence: 0.91,
    metadata: { score: 91 },
    relatedNode: "type_analysis",
  },
  {
    id: "cot_10",
    timestamp: 6300,
    type: "action",
    content: "Checking component prop validation and default values...",
    context: "Component Quality Review",
    actionType: "analyze_code",
    relatedNode: "component_analysis",
  },
  {
    id: "cot_11",
    timestamp: 7000,
    type: "observation",
    content:
      "Excellent prop validation! All components have proper TypeScript interfaces, default values are well-defined, and optional props are correctly marked.",
    context: "Component Assessment",
    confidence: 0.95,
    relatedNode: "component_analysis",
  },
  {
    id: "cot_12",
    timestamp: 7700,
    type: "action",
    content: "Reviewing test files to ensure they're updated for TypeScript compatibility...",
    context: "Test Compatibility Check",
    actionType: "analyze_code",
    metadata: { file: "src/components/__tests__/" },
    relatedNode: "test_analysis",
  },
  {
    id: "cot_13",
    timestamp: 8400,
    type: "observation",
    content:
      "Test files have been properly updated with TypeScript. Good use of typed test utilities and proper mocking with type safety.",
    context: "Test Quality Assessment",
    confidence: 0.88,
    metadata: { score: 88 },
    relatedNode: "test_analysis",
  },
  {
    id: "cot_14",
    timestamp: 9100,
    type: "reflection",
    content:
      "This is an exemplary TypeScript migration. The code quality is high, type safety is comprehensive, and the migration appears complete and consistent.",
    context: "Overall Quality Assessment",
    confidence: 0.94,
    relatedNode: "summary_generation",
  },
  {
    id: "cot_15",
    timestamp: 9800,
    type: "decision",
    content:
      "✅ APPROVAL RECOMMENDED: This PR demonstrates excellent TypeScript practices with comprehensive type safety. No security concerns identified. Score: 92/100.",
    context: "Final Approval",
    confidence: 0.96,
    metadata: { score: 92 },
    relatedNode: "summary_generation",
    appliedPolicies: ["typescript_best_practices", "code_quality_standards"],
    knowledgeConfidence: 0.95,
  },
  {
    id: "cot_16",
    timestamp: 10500,
    type: "action",
    content: "Generating approval summary with commendations for code quality and migration completeness...",
    context: "Success Documentation",
    actionType: "generate_comment",
    relatedNode: "summary_generation",
  },
]

// Chain of thought for PR 138 (Unit Tests) - Perfect score, comprehensive testing
export const pr138ChainOfThought: EnhancedChainOfThoughtStep[] = [
  {
    id: "cot_1",
    timestamp: 0,
    type: "thought",
    content:
      "This PR focuses on adding comprehensive unit tests for API endpoints. Testing PRs are typically low-risk from a security perspective but high-value for code quality.",
    context: "Initial Assessment",
    confidence: 0.94,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_2",
    timestamp: 600,
    type: "observation",
    content:
      "Impressive scope: 15 files, 567 additions, only 12 deletions. This suggests comprehensive test coverage addition rather than refactoring existing tests.",
    context: "Scope Analysis",
    confidence: 0.96,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_3",
    timestamp: 1200,
    type: "action",
    content: "Analyzing test structure and organization patterns...",
    context: "Test Architecture Review",
    actionType: "analyze_code",
    metadata: { file: "tests/api/" },
    relatedNode: "test_structure_analysis",
  },
  {
    id: "cot_4",
    timestamp: 1800,
    type: "observation",
    content:
      "Excellent test organization! Tests are properly grouped by endpoint, with clear describe blocks and descriptive test names. Following AAA pattern (Arrange, Act, Assert).",
    context: "Structure Assessment",
    confidence: 0.97,
    metadata: { score: 97 },
    relatedNode: "test_structure_analysis",
    appliedPolicies: ["test_organization_standards"],
    knowledgeConfidence: 0.96,
  },
  {
    id: "cot_5",
    timestamp: 2400,
    type: "action",
    content: "Reviewing test coverage for edge cases and error scenarios...",
    context: "Coverage Analysis",
    actionType: "analyze_code",
    relatedNode: "coverage_analysis",
  },
  {
    id: "cot_6",
    timestamp: 3000,
    type: "observation",
    content:
      "Outstanding edge case coverage! Tests include invalid inputs, boundary conditions, authentication failures, and rate limiting scenarios. This is thorough testing.",
    context: "Edge Case Assessment",
    confidence: 0.98,
    metadata: { score: 98 },
    relatedNode: "coverage_analysis",
  },
  {
    id: "cot_7",
    timestamp: 3600,
    type: "action",
    content: "Examining mock data quality and test data management...",
    context: "Test Data Review",
    actionType: "analyze_code",
    metadata: { file: "tests/helpers/mockData.ts" },
    relatedNode: "data_analysis",
  },
  {
    id: "cot_8",
    timestamp: 4200,
    type: "observation",
    content:
      "Excellent mock data setup! Realistic test data, proper data factories, and good separation of concerns. Mock data is reusable and well-typed.",
    context: "Mock Data Quality",
    confidence: 0.95,
    relatedNode: "data_analysis",
  },
  {
    id: "cot_9",
    timestamp: 4800,
    type: "action",
    content: "Checking test isolation and cleanup procedures...",
    context: "Test Isolation Review",
    actionType: "check_patterns",
    relatedNode: "isolation_analysis",
  },
  {
    id: "cot_10",
    timestamp: 5400,
    type: "observation",
    content:
      "Perfect test isolation! Each test properly sets up and tears down its environment. No test pollution or dependencies between tests detected.",
    context: "Isolation Assessment",
    confidence: 0.97,
    relatedNode: "isolation_analysis",
  },
  {
    id: "cot_11",
    timestamp: 6000,
    type: "action",
    content: "Analyzing assertion quality and test readability...",
    context: "Assertion Quality Review",
    actionType: "analyze_code",
    relatedNode: "assertion_analysis",
  },
  {
    id: "cot_12",
    timestamp: 6600,
    type: "observation",
    content:
      "Assertions are specific, meaningful, and use appropriate matchers. Error messages are clear and would help with debugging. Great use of custom matchers.",
    context: "Assertion Quality",
    confidence: 0.94,
    metadata: { score: 94 },
    relatedNode: "assertion_analysis",
  },
  {
    id: "cot_13",
    timestamp: 7200,
    type: "action",
    content: "Reviewing performance test considerations and async handling...",
    context: "Performance Testing Review",
    actionType: "analyze_code",
    relatedNode: "performance_analysis",
  },
  {
    id: "cot_14",
    timestamp: 7800,
    type: "observation",
    content:
      "Async operations are properly handled with await/async patterns. Tests include timeout considerations and proper promise handling. No race conditions detected.",
    context: "Async Handling Assessment",
    confidence: 0.93,
    relatedNode: "performance_analysis",
  },
  {
    id: "cot_15",
    timestamp: 8400,
    type: "reflection",
    content:
      "This is exemplary test engineering work. The test suite is comprehensive, well-organized, and follows all best practices. This will significantly improve code reliability.",
    context: "Overall Excellence Assessment",
    confidence: 0.98,
    relatedNode: "summary_generation",
  },
  {
    id: "cot_16",
    timestamp: 9000,
    type: "decision",
    content:
      "🏆 EXCEPTIONAL WORK: This PR sets the gold standard for API testing. Comprehensive coverage, excellent organization, and perfect execution. Score: 94/100.",
    context: "Excellence Recognition",
    confidence: 0.98,
    metadata: { score: 94 },
    relatedNode: "summary_generation",
    appliedPolicies: ["testing_excellence_standards", "api_testing_guidelines"],
    knowledgeConfidence: 0.97,
  },
  {
    id: "cot_17",
    timestamp: 9600,
    type: "action",
    content: "Generating commendation report highlighting this as a model for future testing efforts...",
    context: "Excellence Documentation",
    actionType: "generate_comment",
    relatedNode: "summary_generation",
  },
]

// Chain of thought for PR 139 (WebSocket Bug Fix) - Clean fix, no issues
export const pr139ChainOfThought: EnhancedChainOfThoughtStep[] = [
  {
    id: "cot_1",
    timestamp: 0,
    type: "thought",
    content:
      "This is a critical bug fix for a memory leak in WebSocket connections. Memory leaks can be serious, so I need to carefully analyze the fix approach.",
    context: "Critical Bug Assessment",
    confidence: 0.95,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_2",
    timestamp: 500,
    type: "observation",
    content:
      "Small, focused change: 3 files, 45 additions, 23 deletions. This suggests a targeted fix rather than a large refactor, which is good for a critical bug.",
    context: "Change Scope Analysis",
    confidence: 0.93,
    relatedNode: "context_gathering",
  },
  {
    id: "cot_3",
    timestamp: 1000,
    type: "action",
    content: "Analyzing the WebSocket connection handling code to understand the memory leak source...",
    context: "Root Cause Analysis",
    actionType: "analyze_code",
    metadata: { file: "src/websocket/connection.ts" },
    relatedNode: "leak_analysis",
  },
  {
    id: "cot_4",
    timestamp: 1600,
    type: "observation",
    content:
      "I can see the issue clearly: event listeners were not being properly removed when connections closed, and connection objects weren't being dereferenced.",
    context: "Memory Leak Identification",
    confidence: 0.97,
    metadata: { file: "src/websocket/connection.ts", line: 45 },
    relatedNode: "leak_analysis",
  },
  {
    id: "cot_5",
    timestamp: 2200,
    type: "action",
    content: "Reviewing the proposed fix implementation...",
    context: "Fix Implementation Review",
    actionType: "analyze_code",
    relatedNode: "fix_analysis",
  },
  {
    id: "cot_6",
    timestamp: 2800,
    type: "observation",
    content:
      "Excellent fix approach! The code now properly calls removeAllListeners() and sets connection references to null. Clean, straightforward solution.",
    context: "Fix Quality Assessment",
    confidence: 0.96,
    metadata: { score: 96 },
    relatedNode: "fix_analysis",
  },
  {
    id: "cot_7",
    timestamp: 3400,
    type: "action",
    content: "Checking for any potential side effects or edge cases in the fix...",
    context: "Side Effect Analysis",
    actionType: "check_patterns",
    relatedNode: "safety_analysis",
  },
  {
    id: "cot_8",
    timestamp: 4000,
    type: "observation",
    content:
      "No negative side effects detected. The cleanup is properly sequenced and won't interfere with active connections. Error handling is preserved.",
    context: "Safety Verification",
    confidence: 0.94,
    relatedNode: "safety_analysis",
  },
  {
    id: "cot_9",
    timestamp: 4600,
    type: "action",
    content: "Reviewing error handling and graceful degradation patterns...",
    context: "Error Handling Review",
    actionType: "analyze_code",
    relatedNode: "error_analysis",
  },
  {
    id: "cot_10",
    timestamp: 5200,
    type: "observation",
    content:
      "Error handling is robust. The fix includes proper try-catch blocks around cleanup operations and won't throw if cleanup fails.",
    context: "Error Handling Assessment",
    confidence: 0.92,
    relatedNode: "error_analysis",
  },
  {
    id: "cot_11",
    timestamp: 5800,
    type: "action",
    content: "Checking if any tests were added or updated to prevent regression...",
    context: "Test Coverage Review",
    actionType: "analyze_code",
    metadata: { file: "tests/websocket/" },
    relatedNode: "test_analysis",
  },
  {
    id: "cot_12",
    timestamp: 6400,
    type: "observation",
    content:
      "Good test coverage added! Tests verify that event listeners are removed and memory is properly cleaned up. Includes regression test for the specific leak scenario.",
    context: "Test Quality Assessment",
    confidence: 0.9,
    metadata: { score: 90 },
    relatedNode: "test_analysis",
  },
  {
    id: "cot_13",
    timestamp: 7000,
    type: "reflection",
    content:
      "This is a textbook example of a well-executed critical bug fix. Targeted, safe, well-tested, and addresses the root cause without introducing complexity.",
    context: "Fix Excellence Assessment",
    confidence: 0.96,
    relatedNode: "summary_generation",
  },
  {
    id: "cot_14",
    timestamp: 7600,
    type: "decision",
    content:
      "✅ EXCELLENT BUG FIX: Critical issue resolved with minimal, safe changes. Proper testing included. Ready for immediate deployment. Score: 88/100.",
    context: "Approval for Critical Fix",
    confidence: 0.97,
    metadata: { score: 88 },
    relatedNode: "summary_generation",
    appliedPolicies: ["critical_bug_fix_standards", "memory_management_guidelines"],
    knowledgeConfidence: 0.95,
  },
  {
    id: "cot_15",
    timestamp: 8200,
    type: "action",
    content: "Generating approval with recommendation for expedited deployment due to critical nature...",
    context: "Critical Approval Documentation",
    actionType: "generate_comment",
    relatedNode: "summary_generation",
  },
]

export const chainOfThoughtData: Record<string, EnhancedChainOfThoughtStep[]> = {
  pr_142: pr142ChainOfThought,
  pr_140: pr140ChainOfThought,
  pr_138: pr138ChainOfThought,
  pr_139: pr139ChainOfThought,
}
