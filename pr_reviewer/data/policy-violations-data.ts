import type { PolicyViolation } from "@/types/knowledge-base"

export const policyViolationsData: Record<string, PolicyViolation[]> = {
  pr_142: [
    {
      id: "policy_1",
      severity: "error",
      policyId: "security_001",
      policyTitle: "SQL Injection Prevention",
      description: "Direct string interpolation in SQL queries detected. This violates company security policy.",
      suggestion: "Use parameterized queries or prepared statements to prevent SQL injection attacks.",
      confidence: 0.95,
      sourceFile: "src/database/queries.ts",
      sourceLine: 23,
    },
    {
      id: "policy_2",
      severity: "warning",
      policyId: "perf_002",
      policyTitle: "Connection Pooling Requirements",
      description: "Redis client created without connection pooling for production environment.",
      suggestion: "Implement connection pooling for better performance and resource management.",
      confidence: 0.82,
      sourceFile: "src/cache/redis.ts",
      sourceLine: 15,
    },
    {
      id: "policy_3",
      severity: "info",
      policyId: "testing_001",
      policyTitle: "Integration Test Coverage",
      description: "New database operations added without corresponding integration tests.",
      suggestion: "Add integration tests covering the database + cache interaction scenarios.",
      confidence: 0.75,
      sourceFile: "src/database/queries.ts",
    },
  ],
  pr_140: [
    {
      id: "policy_1",
      severity: "info",
      policyId: "style_001",
      policyTitle: "Type Safety Best Practices",
      description: "Minor usage of 'any' type detected, but appears justified for external library integration.",
      suggestion: "Consider creating specific interfaces for external library types where possible.",
      confidence: 0.65,
      sourceFile: "src/components/UserProfile.tsx",
      sourceLine: 45,
    },
  ],
  pr_139: [
    {
      id: "policy_1",
      severity: "info",
      policyId: "perf_001",
      policyTitle: "Resource Cleanup Standards",
      description: "Excellent adherence to resource cleanup policies. Memory leak properly addressed.",
      suggestion: "Consider adding cleanup timeout as additional safety measure.",
      confidence: 0.88,
      sourceFile: "src/websocket/connection.ts",
      sourceLine: 67,
    },
  ],
  pr_138: [
    {
      id: "policy_1",
      severity: "info",
      policyId: "testing_excellence",
      policyTitle: "Testing Excellence Standards",
      description: "Exemplary testing implementation that exceeds all policy requirements.",
      suggestion:
        "This PR sets the standard for future testing efforts. Consider documenting patterns for team reference.",
      confidence: 0.98,
      sourceFile: "tests/api/",
    },
  ],
  pr_136: [
    {
      id: "policy_1",
      severity: "warning",
      policyId: "deps_001",
      policyTitle: "Dependency Update Procedures",
      description: "Major version updates detected without corresponding documentation updates.",
      suggestion: "Update README and deployment docs to reflect breaking changes in dependencies.",
      confidence: 0.78,
      sourceFile: "package.json",
      sourceLine: 45,
    },
    {
      id: "policy_2",
      severity: "info",
      policyId: "security_002",
      policyTitle: "Security Vulnerability Management",
      description: "Good adherence to security update policies. All high-severity vulnerabilities addressed.",
      suggestion: "Consider implementing automated security scanning in CI pipeline.",
      confidence: 0.92,
    },
  ],
}
